#!perl -T

use strict;
use warnings;
use bignum;

use Getopt::Long;
use Pod::Usage;

my %opt;
GetOptions(
  \%opt,

  # functions
  'N|n|count',
  'max',
  'mean|avg|m',
  'median',
  'min',
  'mode',
  'percentile=i',
  'quartile=i',
  'sd|stdev',
  'sem|sterr',
  'sum|s',
  'variance|var',

  # predefined output sets
  'summary|five',
  'complete|all',
  'default|basic',

	# input control
	'comma|c=s',

  # output control
  'delimiter|d=s',
  'format|fmt|f=s',
  'no-header|nh',
  'transverse-output|to',

  # error handling
  'quiet|q',
  'strict',

  'help|h',
) or pod2usage(1);

pod2usage(1) if $opt{help};

my %config = get_config(%opt);

my %result = process(%opt);
my @opt = grep { defined $result{$_} } statistical_options(%opt);

if (scalar @opt == 1) {
  print sprintf( $config{format}, $result{$opt[0]} ), "\n";
  exit;
}

if ($config{transverse}) {
  for my $opt (@opt) {
    print "$opt$config{delimiter}" unless $config{'no-header'};
    print sprintf( $config{format}, $result{$opt} ), "\n";
  }
} else {
  print join($config{delimiter}, @opt), "\n" unless $config{'no-header'};
  print join($config{delimiter}, map { sprintf ($config{format}, $result{$_}) } @opt), "\n";
}

exit;

###

sub get_config {
  my %opt = @_;

  my %config = map { $_ => $opt{$_} } grep { defined $opt{$_} } qw/delimiter format no-header transverse-output quiet strict/;

  my $delimiter  = $opt{'delimiter'} || "\t";
  my $format     = $opt{'format'}    || '%.2f';

  if ($delimiter =~ /^\\[a-z]$/) {
    $delimiter = $delimiter eq '\t' ? "\t"
               : $delimiter eq '\n' ? "\n"
                                    : die "Invalid delimiter: '$delimiter'\n";
  }

  if ($format =~ m{( \s* \% [\s+-]? [0-9]*\.?[0-9]* [deEfgGi] \s* )}x) {
    $format = $1;
  } else {
    die "Invalid format: '$format'\n";
  }

  return (%config, delimiter => $delimiter, format => $format);

}


sub process {
  my %opt = @_;
  my ($min,$max);
  my ($n, $sum, $sum_square, $mean) = (0, 0, 0, 0);
  my (%count, $most_common);

  # some functions require that we keep the full dataset
  my @data;
  my $keep_data = (
         defined $opt{median}
      || defined $opt{percentile}
      || defined $opt{quartile}
      || defined $opt{summary}
      || defined $opt{complete}
  );

  # some functions require that we keep frequencies
  my $keep_frequencies = (
         defined $opt{mode}
      || defined $opt{complete}
  );

  my $M2 = 0; # used to calculate variance

my $inputdelimiter = $opt{'comma'};
my @element_arr;
my $interator;

	if ($inputdelimiter) {
		$interator = sub { 
			unless (scalar @element_arr) {  
				my $line = <>;  
				if ($line) {
					@element_arr = split($inputdelimiter , $line); 
				}
				else { return 0; } #if no line done with all files
			}
				my $element =  shift @element_arr;
				$element =~ s/^\s+//;
				$element =~ s/\s+$//;
				return $element;
		}
	}
	else {
		$interator = sub { my $line = <>; return $line; } 
	}


  while (my $num = $interator->()) {
    chomp $num;

    if (!valid_input($num)) {
        my $err = "Invalid value '$num' on input line $.\n";
        if ($config{strict}) {
          die $err;
        } elsif (!$config{quiet}) {
          warn $err;
        }
        next;
    }

    $n++;

    my $delta = $num - $mean;

    $mean += $delta / $n;
    $M2   += $delta * ($num - $mean);

    if ($keep_data) {
      push @data, $num;
    }

    if ($keep_frequencies) {
      $count{$num}++;
      $most_common = $count{$num} if (!defined $most_common or $count{$num} > $most_common);
    }

    $min = $num if (!defined $min or $num < $min);
    $max = $num if (!defined $max or $num > $max);

    $sum += $num;
  }

  # silently exit if $n == 0
  exit if (!$n);

  my ( %summary, $percentile, $quartile, $median );
  if ( $opt{summary} or $opt{complete} ) {
    my ($q1, $q2, $q3) = percentiles(\@data, 25, 50, 75);
    %summary = (
      min    => $min,
      q1     => $q1,
      median => $q2,
      q3     => $q3,
      max    => $max,
    );
  } elsif (defined $opt{percentile}) {
    ($percentile) = percentiles( \@data, $opt{percentile} );
  } elsif (defined $opt{quartile}) {
    die "Invalid quartile\n" if $opt{quartile} < 0 or $opt{quartile} > 4;
    ($quartile)   = percentiles( \@data, $opt{quartile} * 25 );
  } elsif (defined $opt{median}) {
    ($median)     = percentiles( \@data, 50 );
  }

  my $variance = $n > 1 ? $M2 / ($n - 1)             : undef;
  my $sd       = defined $variance ? sqrt($variance) : undef;
  my $sem      = defined $sd       ? $sd/sqrt($n)    : undef;

  my @mode = grep { $count{$_} == $most_common } keys %count;

  my $mode = scalar @mode == 1 ? $mode[0] : undef; # don't deal with multimodes

  my %result = (
    N          => $n,
    max        => $max,
    mean       => $mean,
    median     => $median,
    min        => $min,
    mode       => $mode,
    percentile => $percentile,
    quartile   => $quartile,
    sd         => $sd,
    sem        => $sem,
    sum        => $sum,
    variance   => $variance,
    %summary,
  );

  return %result;
}



sub percentiles {
  my ($data, @p) = @_;

  my @data = sort { $a <=> $b } @{$data};

  my @percentiles = ();
  for my $p (@p) {

    if ($p < 0 or $p > 100) {
      die "Invalid percentile ($p)\n";
    }

    my $index = $p * $#data / 100;

    my $percentile = $index == int($index) ? $data[$index]
                                           : ($data[$index] + $data[$index+1]) / 2;
  
    push @percentiles, $percentile;
  }

  return @percentiles;
}

###

sub statistical_options {
  my %opt = @_;

  # predefined sets
  my %predefined = (
    complete => [ qw/N min q1 median q3 max sum mean sd sem variance percentile quartile mode/ ],
    summary  => [ qw/min q1 median q3 max/ ],
    default  => [ qw/N min max sum mean sd/ ],
  );

  # selected options
  my %selected = map { $_ => 1 } grep { defined $opt{$_} } @{ $predefined{complete} };

  # expand with predefined sets
  for my $set (keys %predefined) {
    if ($opt{$set}) {
      %selected = (%selected, map { $_ => 1 } @{ $predefined{$set} });
    }
  }

  my @selected = %selected ? grep { defined $selected{$_} } @{ $predefined{complete} }
                           : @{ $predefined{default} };

  return @selected;
}

###

sub valid_input {
  my $num = shift;

  return ($num =~ m{^
    [+-]?
    (?: \. ? [0-9]+
      | [0-9]+ \. [0-9]*
      | \. ? [0-9]+ E [+-]? [0-9]+
      | [0-9]* \. [0-9]+ E [+-]? [0-9]+
    )
  $}x);
}

__END__

=head1 NAME

st - statistics from the command line interface (CLI)

=head1 DESCRIPTION

"st" is a command-line tool to calculate statistics from a file or
standard input.

=head1 USAGE

  st <input_file>

  st [options] <input_file>

=head2 OPTIONS

=head3 FUNCTIONS

  --N|n|count           # sample size
  --max                 # maximum
  --mean|average|avg|m  # mean
  --median              # median
  --min                 # minimum
  --mode                # mode
  --sd|stdev            # standard deviation
  --sem|sterr           # standard error of mean
  --sum|s               # sum of elements of the sample
  --variance|var        # variance

  --percentile=<0..100> # percentile (0 < p < 100)
  --quartile=<1..3>     # quartile (1 < q < 3)

  --summary   # five-number summary: min q1 median q3 max
  --complete  # everything

If no functions are selected, C<st> will print:

  n min max sum mean sd

=head3 INPUT FORMATTING

	--comma|-c=<value> #default: "\n"

=head3 FORMATTING

  --delimiter|d=<value>   # default: "\t"
  --format|fmt|f=<value>  # default: "%.2f"

  --no-header|nh          # don't display header
  --transverse-output|to  # output in multiple lines

=head3 ERROR HANDLING

By default, "st" skips invalid input with a warning.

You can change this behavior with the following options:

  --strict   # interrupt process
  --quiet|q  # skip with no warning

=head1 AUTHOR

Nelson Ferraz L<<nferraz@gmail.com>>

=head1 CONTRIBUTING

Send comments, suggestions and bug reports to:

https://github.com/nferraz/st/issues

Or fork the code on github:

https://github.com/nferraz/st

=head2 THANKS

imurray, who suggested a different algorithm for calculating variance.

asgeirn, who suggested a input filter and helped to remove some
warnings.

gabeguz, who modified the script to make it more portable.

=head1 COPYRIGHT

Copyright (c) 2013 Nelson Ferraz.

This program is free software; you can redistribute it and/or modify
it under the MIT License (see LICENSE).
